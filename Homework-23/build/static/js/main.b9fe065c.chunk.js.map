{"version":3,"sources":["util/toGenerateId.js","components/filterField/TodoFilter.js","components/filterField/FilterField.js","components/inputField/TodoAdd.js","components/inputField/InputField.js","components/taskContainer/TodoItem.js","components/taskContainer/TodoList.js","components/taskContainer/TodoToggle.js","components/taskContainer/TaskContainer.js","App.js","index.js"],"names":["generateID","Date","getTime","filters","TodoFilter","filter","handleFilter","className","map","eachFilter","key","href","onClick","event","e","preventDefault","FilterField","activedTodos","completedTodos","setFilter","onClearCompleted","data-todo","TodoAdd","onAdd","onKeyUp","value","target","trim","placeholder","InputField","TodoItem","todo","deleteTodo","toggleTodo","updateTodo","useState","editing","setEditing","editRef","useRef","useEffect","current","focus","completed","onDoubleClick","checked","type","onChange","id","data-id","title","ref","defaultValue","onBlur","TodoList","todos","TodoToggle","onToggleAllTodos","htmlFor","TaskContainer","onDelete","onToggle","onUpdate","isCompletedAllTodos","data","getCountCompletedTodos","length","App","setTodos","setCompleted","filteredTodos","filterTodos","getCountActiveTodos","body","activedTodosCount","completedTodosCount","onFilter","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9fe065c.chunk.js","sourcesContent":["//import React from \"react\";\r\n\r\nconst generateID = () => new Date().getTime();\r\n\r\nexport default generateID;","import React from \"react\";\n\nconst filters = [\"all\", \"active\", \"completed\"];\n\nconst TodoFilter = ({ filter, handleFilter }) => {\n  const onClick = (e, filter) => {\n    e.preventDefault();\n    handleFilter(filter);\n  };\n\n  return (\n    <ul className=\"filters\">\n      {filters.map(eachFilter => {\n        const className = filter === eachFilter ? \"selected\" : \"\";\n        return (\n          <li key={eachFilter}>\n            <a\n              href={eachFilter}\n              className={className}\n              onClick={event => onClick(event, eachFilter)}\n            >\n              {eachFilter}\n            </a>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TodoFilter;\n","import React from \"react\";\r\n\r\nimport TodoFilter from \"./TodoFilter\";\r\n\r\nconst FilterField = ({\r\n  activedTodos,\r\n  completedTodos,\r\n  filter,\r\n  setFilter,\r\n  onClearCompleted\r\n}) => {\r\n  return (\r\n    <footer className=\"footer\">\r\n          <span className=\"todo-count\">\r\n            <strong>{activedTodos}</strong> items left\r\n          </span>\r\n          <TodoFilter filter={filter} handleFilter={setFilter} />\r\n          <button data-todo=\"clear-completed\" className=\"clear-completed\">\r\n            Clear completed\r\n          </button>\r\n        </footer>\r\n  );\r\n};\r\n\r\nexport default FilterField;","import React from \"react\";\r\n\r\nconst TodoAdd = ({ onAdd }) => {\r\n    const handleAddTodo = e => {\r\n    const value = e.target.value.trim();\r\n\r\n    if (e.key === \"Enter\" && value) {\r\n      onAdd(value);\r\n      e.target.value = \"\";\r\n    }\r\n    };\r\n    return (\r\n        <input\r\n            onKeyUp={handleAddTodo}\r\n            className=\"new-todo\"\r\n            placeholder=\"What needs to be done?\"\r\n          />\r\n    );\r\n    };\r\n\r\n    export default TodoAdd;","import React from \"react\";\r\nimport TodoAdd from \"./TodoAdd\";\r\n\r\nconst InputField = ({ onAdd }) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>todos</h1>\r\n      <TodoAdd onAdd={onAdd} />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default InputField;","import React, { useState, useRef, useEffect } from \"react\";\n\nconst TodoItem = ({ todo, deleteTodo, toggleTodo, updateTodo }) => {\n  const [editing, setEditing] = useState(false);\n  \n  const editRef = useRef();\n\n  useEffect(() => {\n    if (editing) {\n      editRef.current.focus();\n    }\n  }, [editing]);\n\n  return (\n    <li\n      className={`${todo.completed ? \"completed\" : \"\"} ${\n        editing ? \"editing\" : \"\"\n      }`}\n      onDoubleClick={() => {\n        setEditing(true);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          checked={todo.completed}\n          type=\"checkbox\"\n          data-todo=\"toggle\"\n          onChange={() => toggleTodo(todo.id)}\n        />\n        <label data-id={1}>{todo.title}</label>\n        <button\n          data-todo=\"delete\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        ref={editRef}\n        type=\"text\"\n        className=\"edit\"\n        defaultValue=\"Todo 1\"\n        onBlur={() => setEditing(false)}\n      />\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nconst TodoList = ({ todos, deleteTodo, toggleTodo, updateTodo }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => {\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            deleteTodo={deleteTodo}\n            toggleTodo={toggleTodo}\n            updateTodo={updateTodo}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\r\n\r\nconst TodoToggle = ({ completed, onToggleAllTodos }) => {\r\n    const setCompleted = e => {\r\n        //const checked = e.target.checked;\r\n      };\r\n  return (\r\n      <>\r\n            <input\r\n            onChange={setCompleted}\r\n            id=\"toggle-all\"\r\n            className=\"toggle-all\"\r\n            type=\"checkbox\"\r\n            checked={completed}\r\n          />\r\n          <label htmlFor=\"toggle-all\">\r\n              Mark all as complete\r\n          </label>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default TodoToggle;","import React from \"react\";\r\n\r\nimport TodoList from \"./TodoList\";\r\nimport TodoToggle from \"./TodoToggle\";\r\n\r\nconst TaskContainer = ({\r\n  todos,\r\n  onDelete,\r\n  onToggle,\r\n  onUpdate,\r\n  isCompletedAllTodos,\r\n  onToggleAllTodos\r\n}) => {\r\n  return (\r\n    <section className=\"main\">\r\n      <TodoToggle\r\n        isCompletedAllTodos={isCompletedAllTodos}\r\n        onToggleAllTodos={onToggleAllTodos}\r\n      />\r\n\r\n      <TodoList\r\n        todos={todos}\r\n        onDelete={onDelete}\r\n        onToggle={onToggle}\r\n        onUpdate={onUpdate}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TaskContainer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\n//import TodoList from \"./components/taskContainer/TodoList\";\nimport generateID from \"./util/toGenerateId\";\n//import TodoToggle from \"./components/taskContainer/TodoToggle\";\n\nimport FilterField from \"./components/filterField/FilterField\";\nimport InputField from \"./components/inputField/InputField\";\nimport TaskContainer from \"./components/taskContainer/TaskContainer\";\nlet data = [\n  {\n    id: 1,\n    title: \"Todo 1\",\n    completed: false\n  },\n  {\n    id: 2,\n    title: \"Todo 2\",\n    completed: true\n  },\n  {\n    id: 3,\n    title: \"Todo 3\",\n    completed: false\n  }\n];\n\nconst getCountActiveTodos = todos => {\n  return todos.filter(todo => !todo.completed).length;\n};\n\nconst getCountCompletedTodos = todos => {\n  return todos.filter(todo => todo.completed).length;\n};\n\nexport default function App() {\n  const [todos, setTodos] = useState(data);\n  //const [count, setCount] = useState(0);\n  const [completed, setCompleted] = useState(false);\n  const [filter, setFilter] = useState(\"all\");\n\n  const toggleTodo = id => {\n    setTodos(todos => {\n      return todos.map(todo => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        } else {\n          return todo;\n        }\n      });\n    });\n  };\n\n  const updateTodo = (id, body) => {\n    setTodos(todos => {\n      return todos.map(todo => {\n        if (todo.id === id) {\n          return { ...todo, ...body };\n        } else {\n          return todo;\n        }\n      });\n    });\n  };\n\n  //const generateID = () => new Date().getTime();\n\n  const addTodo = title => {\n    const id = generateID();\n    const todo = { id, title, completed: false };\n\n    setTodos(todos => [...todos, todo]);\n    setFilter(\"all\");\n  };\n\n  const deleteTodo = id => {\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  };\n\n  const toggleAllTodos = completed => {\n    //console.log(completed);\n    setTodos(todos =>\n      todos.map(todo => ({\n        ...todo,\n        completed\n      }))\n    );\n  };\n\n  const filterTodos = filter => {\n    return todos.filter(todo => {\n      switch (filter) {\n        case \"active\":\n          return !todo.completed;\n        case \"completed\":\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  };\n\n  useEffect(() => {\n    //setCount(getCountActiveTodos(todos));\n    setCompleted(todos.length === getCountCompletedTodos(todos));\n  }, [todos]);\n\n  const clearCompleted = () => {\n    setTodos(todos => todos.filter(todo => !todo.completed));\n  };\n\n  // const handleAddTodo = e => {\n  //   const value = e.target.value.trim();\n\n  //   if (e.key === \"Enter\" && value) {\n  //     addTodo(value);\n  //     e.target.value = \"\";\n  //   }\n  // };\n\n  const filteredTodos = filterTodos(filter);\n  const activedTodos = getCountActiveTodos(todos);\n  const completedTodos = getCountCompletedTodos(todos);\n\n  return (\n    <div className=\"App\">\n      <section className=\"todoapp\">\n      <InputField onAdd={addTodo} />\n        {/* <header className=\"header\">\n          <h1>todos</h1>\n          <TodoAdd onAdd={addTodo} /> */}\n          {/* <input\n            onKeyUp={handleAddTodo}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          /> */}\n        {/* </header> */}\n        <section className=\"main\">\n        <TaskContainer\n        todos={filteredTodos}\n        onDelete={deleteTodo}\n        onToggle={toggleTodo}\n        onUpdate={updateTodo}\n        isCompletedAllTodos={completed}\n        onToggleAllTodos={toggleAllTodos}\n      />\n          {/* <input\n            onChange={e => setCompleted(e.target.checked)}\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={completed}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label> */}\n          {/* <TodoToggle\n        isCompletedAllTodos={completed}\n        onToggleAllTodos={toggleAllTodos}\n      /> */}\n\n          {/* <TodoList\n            todos={filteredTodos}\n            deleteTodo={deleteTodo}\n            toggleTodo={toggleTodo}\n            updateTodo={updateTodo}\n          /> */}\n        </section>\n        <FilterField\n          activedTodosCount={activedTodos}\n          completedTodosCount={completedTodos}\n          filter={filter}\n          onFilter={setFilter}\n          onClearCompleted={clearCompleted}\n        />\n        {/* <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>{count}</strong> items left\n          </span>\n          <TodoFilter filter={filter} handleFilter={setFilter} />\n          <button data-todo=\"clear-completed\" className=\"clear-completed\">\n            Clear completed\n          </button>\n        </footer> */}\n      </section>\n    </div>\n  );\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}